name: CI/CD Pipeline

on:
  push:
    tags-ignore:
      - '**'
  pull_request:
  workflow_dispatch:

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-20.04
    container: ${{ secrets.DOCKERHUB_USERNAME }}/PROJECTNAME-runner:ci-${{ matrix.python-version }}
    outputs:
      package_version: ${{ steps.proj_ver_determiner.outputs.package_version }}
      package_version_tag: ${{ steps.proj_ver_determiner.outputs.package_version_tag }}
      latest_github_tag: ${{ steps.proj_ver_determiner.outputs.latest_github_tag }}
      should_deploy: ${{ steps.proj_ver_determiner.outputs.should_deploy }}
    strategy:
      matrix:
        python-version: [ 2.7, 3.6, 3.7, 3.8, 3.9, 3.10 ]
    steps:
      - name: Clone repository
        shell: bash
        run: |
          git config --global http.sslverify false
          git clone https://github.com/${{ github.repository }}.git .

      # Information setup

      - if: matrix.python-version == '3.9'
        name: Pipeline data gatherer
        id: data_gatherer
        shell: bash
        run: |
          # Get default branch
          REPO="${{ github.repository }}"
          DEFAULT_BRANCH=`(curl -X GET https://api.github.com/repos/$REPO) | jq '.default_branch'`

          echo "::set-output name=default_branch::$(echo $DEFAULT_BRANCH)"

      - if: matrix.python-version == '3.9'
        name: Pipeline conditionals handler
        id: conditionals_handler
        shell: bash
        run: |
          DEFAULT_BRANCH="${{ steps.data_gatherer.outputs.default_branch }}"
          GITHUB_REF="${{ github.ref }}"
          CURRENT_BRANCH=`echo $GITHUB_REF | sed -e "s/^refs\/heads\///"`
          GITHUB_EVENT_NAME="${{ github.event_name }}"
          IS_DEFAULT_BRANCH='false'
          IS_PUSH='false'
          IS_PUSH_TO_DEFAULT_BRANCH='false'

          if [ $CURRENT_BRANCH == $DEFAULT_BRANCH ]; then
            IS_DEFAULT_BRANCH='true'
          fi
          if [ $GITHUB_EVENT_NAME == 'push' ]; then
            IS_PUSH='true'
          fi
          if [ $CURRENT_BRANCH == $DEFAULT_BRANCH ] && [ $GITHUB_EVENT_NAME == 'push' ]; then
            IS_PUSH_TO_DEFAULT_BRANCH='true'
          fi

          echo "::set-output name=is_default_branch::$(echo $IS_DEFAULT_BRANCH)"
          echo "::set-output name=is_push::$(echo $IS_PUSH)"
          echo "::set-output name=is_push_to_default_branch::$(echo $IS_PUSH_TO_DEFAULT_BRANCH)"

      - if: steps.conditionals_handler.outputs.is_push_to_default_branch == 'true' && matrix.python-version == '3.9'
        name: Project version/deploy determiner
        id: proj_ver_determiner
        shell: bash
        run: |
          git fetch --all --tags

          ORIGINAL_REPO="OWNER/PROJECTNAME"
          CURRENT_REPO="${{ github.repository }}"
          PACKAGE_VERSION=$(python3.9 setup.py --version)
          PACKAGE_VERSION_TAG=`echo v$PACKAGE_VERSION | sed -e 's/[[:space:]]//'`
          LATEST_GITHUB_TAG=`echo $(git tag | sort --version-sort | tail -n1)`
          IS_NEW_VERSION=$(python3.9 -c "import sys, packaging.version as v;p=v.parse;s=sys.argv;a=p(s[1]);b=p(s[2]);print((a>b)-(a<b))" $PACKAGE_VERSION_TAG $LATEST_GITHUB_TAG)
          SHOULD_DEPLOY="false"

          if [ "$CURRENT_REPO" == "$ORIGINAL_REPO" ] && [ -z "$LATEST_GITHUB_TAG" ] || [ $IS_NEW_VERSION == 1 ]; then
            SHOULD_DEPLOY="true"
          fi

          echo "::set-output name=package_version::$(echo $PACKAGE_VERSION)"
          echo "::set-output name=package_version_tag::$(echo $PACKAGE_VERSION_TAG)"
          echo "::set-output name=latest_github_tag::$(echo $LATEST_GITHUB_TAG)"
          echo "::set-output name=should_deploy::$(echo $SHOULD_DEPLOY)"

      # Code validations and logs generation

      - name: Create logs directory
        shell: bash
        run: |
          mkdir -p "Python ${{ matrix.python-version }} - logs"

      - name: Install requirements for Python ${{ matrix.python-version }}
        shell: bash
        run: |
          REQS_FILE="requirements.txt"
          PYTHON_VERSION="${{ matrix.python-version }}"

          pip install -r $REQS_FILE 2>&1 | tee "Python $PYTHON_VERSION - logs/requirements.log"
          exit ${PIPESTATUS[0]} # without this explicit exit code return, even if the previous command fails, the step won't return error because of 'tee'

      - name: Upload requirements log as artifact
        uses: actions/upload-artifact@v2
        with:
          name: requirements-log
          path: logs/requirements.log

      - if: matrix.python-version == '3.9'
        name: Lint with flake8
        shell: bash
        run: |
          flake8 PROJECTNAME/** --max-line-length=199

      - name: Run tests with pytest
        shell: bash
        run: |
          pytest 2>&1 | tee "Python ${{ matrix.python-version }} - logs/pytest.log"
          exit ${PIPESTATUS[0]}

      - name: Upload pytest log as artifact
        uses: actions/upload-artifact@v2
        with:
          name: Python ${{ matrix.python-version }} - pytest-log
          path: "Python ${{ matrix.python-version }} - logs/pytest.log"

      # GitHub Advanced Security Compliance

      - name: GHASC check # runs right before packaging to fail the pipeline if security issues are found
        uses: GeekMasher/advanced-security-compliance@v1.5
        with:
          policy-path: policies/security-policy.yml
          token: ${{ secrets.GHASC_TOKEN }} # token requires 'public_repo' and 'security_events' scopes

      # Package application

      - if: matrix.python-version == '3.9'
        name: Package application
        shell: bash
        run: |
          python3.9 setup.py sdist bdist_wheel

      - if: matrix.python-version == '3.9'
        name: Upload packages as artifact
        uses: actions/upload-artifact@v2
        with:
          name: Packages
          path: dist/

  cd:
    if: needs.ci.outputs.should_deploy == 'true'
    name: Continuous Deployment
    needs: ci
    runs-on: ubuntu-20.04
    container: ${{ secrets.DOCKERHUB_USERNAME }}/PROJECTNAME-runner:cd-3.9
    steps:
      - name: Clone repository
        run: |
          git config --global http.sslverify false
          git clone https://token:${{ secrets.GIT_REPO_TOKEN }}@github.com/${{ github.repository }}.git .

      # Download CI artifacts

      - name: Download and extract package artifact
        uses: actions/download-artifact@v2
        with:
          name: Packages
          path: dist/

      # Package deployment

      - name: Package deployment
        run: |
          twine upload -u __token__ -p ${{ secrets.PYPI_API_TOKEN }} dist/*

      # GitHub deploy

      - name: Push GitHub tag
        run: |
          GITHUB_TAG="${{ needs.ci.outputs.package_version_tag }}"

          git config --global user.email ${{ secrets.GH_USER_EMAIL }}
          git config --global user.name ${{ secrets.GH_USER_NAME }}
          git tag $GITHUB_TAG
          git push origin --tags

      - name: Create and publish release
        run: |
          PACKAGE_VERSION="${{ needs.ci.outputs.package_version }}"
          RELEASE_TAG="${{ needs.ci.outputs.package_version_tag }}"
          PREVIOUS_TAG="${{ needs.ci.outputs.latest_github_tag }}"
          RELEASE_TITLE="$RELEASE_TAG"
          START_LINE=$(( $( grep -n "## $RELEASE_TAG" CHANGELOG.md | grep -Eo '^[^:]+' ) + 2 ))
          END_LINE=$(( $( grep -n "## $PREVIOUS_TAG" CHANGELOG.md | grep -Eo '^[^:]+' ) - 2 ))
          RELEASE_NOTES=$(echo $'### Changelog:\n\n' "$( sed -n "$START_LINE,$END_LINE"p CHANGELOG.md )")
          RELEASE_ASSETS="" # list the relative paths to the files separated by a single space

          gh release create $RELEASE_TAG \
          --title $RELEASE_TITLE \
          --notes "$RELEASE_NOTES" \
          $RELEASE_ASSETS
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Built with ‚ù§ by [Pipeline Foundation](https://pipeline.foundation)