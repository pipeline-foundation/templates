name: CI/CD Pipeline

on: [ push, pull_request, workflow_dispatch ]

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-20.04
    outputs:
      package_version: ${{ steps.proj_ver_determiner.outputs.package_version }}
      package_version_tag: ${{ steps.proj_ver_determiner.outputs.package_version_tag }}
      latest_github_tag: ${{ steps.proj_ver_determiner.outputs.latest_github_tag }}
      should_deploy: ${{ steps.proj_ver_determiner.outputs.should_deploy }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Tooling setup

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install Python tools
        run: |
          python3 -m pip install --upgrade pip
          pip install flake8 wheel pytest

      # Information setup

      - name: Pipeline data gatherer
        id: data_gatherer
        run: |
          # Get default branch
          REPO="${{ github.repository }}"
          DEFAULT_BRANCH=`(curl -X GET https://api.github.com/repos/$REPO) | jq '.default_branch'`

          echo "::set-output name=default_branch::$(echo $DEFAULT_BRANCH)"

      - name: Pipeline conditionals handler
        id: conditionals_handler
        run: |
          DEFAULT_BRANCH="${{ steps.data_gatherer.outputs.default_branch }}"
          GITHUB_REF="${{ github.ref }}"
          CURRENT_BRANCH=`echo $GITHUB_REF | sed -e "s/^refs\/heads\///"`
          GITHUB_EVENT_NAME="${{ github.event_name }}"
          IS_DEFAULT_BRANCH='false'
          IS_PUSH='false'
          IS_PUSH_TO_DEFAULT_BRANCH='false'

          if [ $CURRENT_BRANCH == $DEFAULT_BRANCH ]; then
            IS_DEFAULT_BRANCH='true'
          fi
          if [ $GITHUB_EVENT_NAME == 'push' ]; then
            IS_PUSH='true'
          fi
          if [ $CURRENT_BRANCH == $DEFAULT_BRANCH ] && [ $GITHUB_EVENT_NAME == 'push' ]; then
            IS_PUSH_TO_DEFAULT_BRANCH='true'
          fi

          echo "::set-output name=is_default_branch::$(echo $IS_DEFAULT_BRANCH)"
          echo "::set-output name=is_push::$(echo $IS_PUSH)"
          echo "::set-output name=is_push_to_default_branch::$(echo $IS_PUSH_TO_DEFAULT_BRANCH)"

      - if: steps.conditionals_handler.outputs.is_push_to_default_branch == 'true'
        name: Project version/deploy determiner
        id: proj_ver_determiner
        run: |
          git fetch --all --tags

          PACKAGE_VERSION=$(cat setup.py \
            | grep version \
            | sed 's/[version=", ]//g')
          PACKAGE_VERSION_TAG=`echo v$PACKAGE_VERSION | sed -e 's/[[:space:]]//'`
          LATEST_GITHUB_TAG=`echo $(git tag | sort --version-sort | tail -n1)`
          SHOULD_DEPLOY="false"

          # download semver compare tool
          curl https://raw.githubusercontent.com/Ariel-Rodriguez/sh-semversion-2/main/semver2.sh -o semver2.sh
          chmod +x semver2.sh

          if [ -z "$LATEST_GITHUB_TAG" ]; then
            SHOULD_DEPLOY="true"
          else 
            if [ `echo $(./semver2.sh $PACKAGE_VERSION_TAG $LATEST_GITHUB_TAG)` = 1 ]; then
              SHOULD_DEPLOY="true"
            fi
          fi

          echo "::set-output name=package_version::$(echo $PACKAGE_VERSION)"
          echo "::set-output name=package_version_tag::$(echo $PACKAGE_VERSION_TAG)"
          echo "::set-output name=latest_github_tag::$(echo $LATEST_GITHUB_TAG)"
          echo "::set-output name=should_deploy::$(echo $SHOULD_DEPLOY)"

      # Code validations and logs generation

      - name: Create logs directory
        run: |
          mkdir -p logs

      - name: Install requirements
        run: |
          REQS_FILE="requirements.txt"

          if [ -f $REQS_FILE ]; then 
            pip install -r $REQS_FILE 2>&1 | tee logs/requirements.log
            exit ${PIPESTATUS[0]} # without this explicit exit code return, even if the previous command fails, the step won't return error because of 'tee'
          fi

      - name: Upload requirements log as artifact
        uses: actions/upload-artifact@v2
        with:
          name: requirements-log
          path: logs/requirements.log

      - name: Lint with flake8
        run: |
          flake8 . --max-line-length=139 2>&1 | tee logs/flake8.log
          exit ${PIPESTATUS[0]}

      - name: Upload flake8 log as artifact
        uses: actions/upload-artifact@v2
        with:
          name: flake8-log
          path: logs/flake8.log

      - name: Run tests with pytest
        run: |
          pytest 2>&1 | tee logs/pytest.log
          exit ${PIPESTATUS[0]}

      - name: Upload pytest log as artifact
        uses: actions/upload-artifact@v2
        with:
          name: pytest-log
          path: logs/pytest.log

      # Package application

      - name: Package application
        run: |
          python3 setup.py sdist bdist_wheel

      - name: Upload packages as artifact
        uses: actions/upload-artifact@v2
        with:
          name: Packages
          path: dist/

  cd:
    if: needs.ci.outputs.should_deploy == 'true'
    name: Continuous Deployment
    needs: ci
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Tooling setup

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install deployment tools
        run: |
          python3 -m pip install --upgrade pip
          pip install twine

      # Download CI artifacts

      - name: Download and extract package artifact
        uses: actions/download-artifact@v2
        with:
          name: Packages
          path: dist/

      # Package deployment

      - name: Package deployment
        run: |
          twine upload -u __token__ -p ${{ secrets.PYPI_API_TOKEN }} dist/*

      # GitHub deploy

      - name: Push GitHub tag
        run: |
          GITHUB_TAG="${{ needs.ci.outputs.package_version_tag }}"

          git config --global user.email ${{ secrets.GH_USER_EMAIL }}
          git config --global user.name ${{ secrets.GH_USER_NAME }}
          git tag $GITHUB_TAG
          git push origin --tags

      - name: Create and publish release
        run: |
          PACKAGE_VERSION="${{ needs.ci.outputs.package_version }}"
          RELEASE_TAG="${{ needs.ci.outputs.package_version_tag }}"
          PREVIOUS_TAG="${{ needs.ci.outputs.latest_github_tag }}"
          RELEASE_TITLE="$RELEASE_TAG"
          START_LINE=$(( $( grep -n "## $RELEASE_TAG" CHANGELOG.md | grep -Eo '^[^:]+' ) + 2 ))
          END_LINE=$(( $( grep -n "## $PREVIOUS_TAG" CHANGELOG.md | grep -Eo '^[^:]+' ) - 2 ))
          RELEASE_NOTES=$(echo $'### Changelog:\n\n' "$( sed -n "$START_LINE,$END_LINE"p CHANGELOG.md )")
          RELEASE_ASSETS="" # list the relative paths to the files separated by a single space

          gh release create $RELEASE_TAG \
          --title $RELEASE_TITLE \
          --notes "$RELEASE_NOTES" \
          $RELEASE_ASSETS
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Built with ‚ù§ by [Pipeline Foundation](https://pipeline.foundation)