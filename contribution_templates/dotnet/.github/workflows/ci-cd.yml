name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'
    tags:
      - '!**'
  pull_request:
  workflow_dispatch:

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-20.04
    container: ${{ secrets.DOCKERHUB_USERNAME }}/PROJECTNAME-runner:ci-${{ matrix.dotnet-version }}
    env:
      pathToSolution: .sln
      testResultsFolderName: Test results
      publishOutputFolderName: Publish output
      nugetPackagesFolderName: NuGet packages
    outputs:
      latest_version: ${{ steps.tag_generator.outputs.new_version }}
      publishOutputFolderName: ${{ env.publishOutputFolderName }}
      nugetPackagesFolderName: ${{ env.nugetPackagesFolderName }}
    strategy:
      matrix:
        dotnet-version: [ 3.1, 5.0 ]
    steps:
      - name: Clone repository
        shell: bash
        run: |
          git config --global http.sslverify false
          git clone https://github.com/${{ github.repository }}.git .

      # Information setup

      - if: matrix.dotnet-version == '5.0'
        name: Pipeline data gatherer
        id: data_gatherer
        shell: pwsh
        run: |
          # Get default branch
          $repo = "${{ github.repository }}"
          $defaultBranch = Invoke-RestMethod -Method GET -Uri https://api.github.com/repos/$repo | Select-Object -ExpandProperty default_branch

          Write-Output "::set-output name=default_branch::$(echo $defaultBranch)"

      - if: matrix.dotnet-version == '5.0'
        name: Pipeline conditionals handler
        id: conditionals_handler
        shell: pwsh
        run: |
          $defaultBranch = "${{ steps.data_gatherer.outputs.default_branch }}"
          $githubRef = "${{ github.ref }}"
          $currentBranch = $githubRef -replace 'refs/heads/', ''
          $githubEventName = "${{ github.event_name }}"
          $isDefaultBranch = 'false'
          $isPush = 'false'
          $isPushToDefaultBranch = 'false'

          if ( $currentBranch -eq $defaultBranch ) {
            $isDefaultBranch = 'true'
          }
          if ( $githubEventName -eq 'push' ) {
            $isPush = 'true'
          }
          if ( $currentBranch -eq $defaultBranch -and $githubEventName -eq 'push' ) {
            $isPushToDefaultBranch = 'true'
          }

          Write-Output "::set-output name=is_default_branch::$(echo $isDefaultBranch)"
          Write-Output "::set-output name=is_push::$(echo $isPush)"
          Write-Output "::set-output name=is_push_to_default_branch::$(echo $isPushToDefaultBranch)"

      - if: steps.conditionals_handler.outputs.is_push_to_default_branch == 'true' && matrix.dotnet-version == '5.0'
        name: GitHub tag generator
        id: tag_generator
        uses: mathieudutour/github-tag-action@v5.5
        with: 
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: false
          release_branches: ${{ steps.data_gatherer.outputs.default_branch }}
          tag_prefix: ''

      - if: matrix.dotnet-version == '5.0'
        name: Project version determiner
        id: version_determiner
        shell: pwsh
        run: |
          $gitNewVersion = if ( "${{ steps.tag_generator.outputs.new_version }}" ) { "${{ steps.tag_generator.outputs.new_version }}" } else { $null }

          # fetch all tags from remote
          git fetch --all --tags

          $gitTagsList = git tag
          $projectCurrentVersion = ( $gitTagsList | Where-Object { $_ -notmatch 'v' } | Sort-Object { [Version] $_ } -Descending )[0] -replace ' ', ''
          $projectNewVersion = $gitNewVersion ?? $projectCurrentVersion

          Write-Output "::set-output name=project_version::$(echo $projectNewVersion)"

      # Build and test validation

      - name: Restore solution
        shell: pwsh
        run: |
          $pathToSolution = "${{ env.pathToSolution }}"

          dotnet restore $pathToSolution

      - name: Build solution
        shell: pwsh
        run: |
          $pathToSolution = "${{ env.pathToSolution }}"
          $configurationSetting = "Debug"

          dotnet build $pathToSolution `
          --configuration $configurationSetting `
          --no-restore

      - name: Run unit tests
        shell: pwsh
        run: |
          $pathToSolution = "${{ env.pathToSolution }}"
          $configurationSetting = "Debug"
          $loggerAttributes = "trx;LogFilePath=TestResults.trx;verbosity=normal"
          $testOutputFolder = "${{ env.testResultsFolderName }}"

          dotnet test $pathToSolution `
          --configuration $configurationSetting `
          --logger $loggerAttributes `
          --results-directory $testOutputFolder `
          --no-build

      # GitHub Advanced Security Compliance

      - name: GHASC check # runs right before packaging to fail the pipeline if security issues are found
        uses: GeekMasher/advanced-security-compliance@v1.5
        with:
          policy-path: policies/security-policy.yml
          token: ${{ secrets.GHASC_TOKEN }} # token requires 'public_repo' and 'security_events' scopes

      # Artifact generation

      - if: matrix.dotnet-version == '5.0'
        name: Publish project for each target framework
        shell: pwsh
        run: |
          $pathToProject = ""
          $configurationSetting = "Debug"
          $publishOutputFolder = "${{ env.publishOutputFolderName }}"
          $projectVersion = "${{ steps.version_determiner.outputs.project_version }}"
          $targetFrameworksProperty = [String](([xml](Get-Content -Path $pathToProject)).Project.PropertyGroup.TargetFrameworks)
          $targetFrameworks = $targetFrameworksProperty.split(';')
          $githubRunNumber = ${{ github.run_number }}

          foreach ( $framework in $targetFrameworks ) {
            $frameworkNum = [String]($framework -replace ' ', '')

            dotnet publish $pathToProject `
            --configuration $configurationSetting `
            --output "$publishOutputFolder/$frameworkNum" `
            --framework $frameworkNum `
            --no-restore `
            -property:VersionPrefix=$projectVersion `
            -property:VersionSuffix=$githubRunNumber
          }

      - if: matrix.dotnet-version == '5.0'
        name: Pack solution
        shell: pwsh
        run: |
          $pathToSolution = "${{ env.pathToSolution }}"
          $configurationSetting = "Release"
          $packOutputFolder = "${{ env.nugetPackagesFolderName }}"
          $projectVersion = "${{ steps.version_determiner.outputs.project_version }}"
          $githubRunNumber = ${{ github.run_number }}

          dotnet pack $pathToSolution `
          --configuration $configurationSetting `
          --output $packOutputFolder `
          --no-restore `
          -property:VersionPrefix=$projectVersion `
          -property:VersionSuffix=$githubRunNumber

      # Artifact publish to pipeline

      - name: Upload test results as pipeline artifact
        uses: actions/upload-artifact@v2
        with:
          name: Test results
          path: "${{ env.testResultsFolderName }}"

      - name: Upload publish output as pipeline artifact
        uses: actions/upload-artifact@v2
        with:
          name: Publish outputs
          path: "${{ env.publishOutputFolderName }}"

      - name: Upload NuGet packages as pipeline artifact
        uses: actions/upload-artifact@v2
        with:
          name: NuGet packages
          path: "${{ env.nugetPackagesFolderName }}"

  cd:
    if: needs.ci.outputs.latest_version != ''
    name: Continuous Deployment
    needs: ci
    runs-on: ubuntu-20.04
    container: ${{ secrets.DOCKERHUB_USERNAME }}/PROJECTNAME-runner:cd-5.0
    steps:
      - name: Clone repository
        run: |
          git config --global http.sslverify false
          git clone https://token:${{ secrets.GIT_REPO_TOKEN }}@github.com/${{ github.repository }}.git .

      # NuGet packages publish

      - name: Download and extract NuGet packages artifact
        uses: actions/download-artifact@v2
        with:
          name: NuGet packages
          path: "${{ needs.ci.outputs.nugetPackagesFolderName }}"

      - name: Push NuGet packages to NuGet.org
        continue-on-error: true
        shell: pwsh
        run: |
          $nugetPackagesFolder = "${{ needs.ci.outputs.nugetPackagesFolderName }}"
          $nugetSource = "https://api.nuget.org/v3/index.json"
          $nugetApiKey = "${{ secrets.NUGET_API_KEY }}"

          Push-Location $nugetPackagesFolder
          Get-ChildItem *.nupkg | ForEach-Object {
            dotnet nuget push $_.FullName `
            --source $nugetSource `
            --api-key $nugetApiKey
          }

      # GitHub release preparation and publish

      - name: Download and extract assemblies artifact
        uses: actions/download-artifact@v2
        with:
          name: Publish output
          path: "${{ needs.ci.outputs.publishOutputFolderName }}"

      - name: Archive assemblies for release
        shell: pwsh
        run: |
          $publishOutputFolder = "${{ needs.ci.outputs.publishOutputFolderName }}"
          $latestVersion = "${{ needs.ci.outputs.latest_version }}"
          $assembliesArchiveTitle = " $latestVersion Assemblies.7z"

          Push-Location "./$publishOutputFolder"
          7z a "${{ github.workspace }}/$assembliesArchiveTitle" .

      - name: Create and publish release
        shell: pwsh
        run: |
          # !!! Add CHANGELOG.md to release notes feature !!!

          $nugetPackagesFolder = "${{ needs.ci.outputs.nugetPackagesFolderName }}"
          $latestVersion = "${{ needs.ci.outputs.latest_version }}"
          $releaseTag = $latestVersion
          $releaseTitle = "$latestVersion"
          $releaseNotes = ""
          $releaseAssets = "$nugetPackagesFolder/.$latestVersion.nupkg", "$nugetPackagesFolder/.$latestVersion.snupkg", "$releaseTitle Assemblies.7z"

          gh release create $releaseTag `
          --title $releaseTitle `
          --notes $releaseNotes `
          $releaseAssets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Built with ❤ by [Pipeline Foundation](https://pipeline.foundation)